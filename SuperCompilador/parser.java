
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 06 17:33:14 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import src.*;
import src.exp.*;
import src.var.*;
import src.dec.*;
import src.cond.*;
import src.bucle.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 06 17:33:14 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\004\000\002\005\004\000\002\023\002" +
    "\000\002\024\002\000\002\005\007\000\002\005\004\000" +
    "\002\005\007\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\010\000\002\006" +
    "\006\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\005\000\002\007\006\000" +
    "\002\007\004\000\002\007\007\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\003\003\000\002\003" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\022\005\000\002\022\005\000\002" +
    "\025\002\000\002\026\002\000\002\012\012\000\002\013" +
    "\004\000\002\013\002\000\002\027\002\000\002\014\011" +
    "\000\002\030\002\000\002\031\002\000\002\014\014\000" +
    "\002\032\002\000\002\033\002\000\002\034\002\000\002" +
    "\014\016\000\002\011\003\000\002\011\003\000\002\015" +
    "\003\000\002\035\002\000\002\016\007\000\002\017\004" +
    "\000\002\036\002\000\002\020\012\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\044\005\004\012\015\014\020\016\011\017" +
    "\025\022\010\023\034\024\014\026\033\027\012\030\017" +
    "\045\026\046\007\047\022\054\005\055\030\056\037\001" +
    "\002\000\024\005\004\012\015\016\011\017\025\022\010" +
    "\023\034\054\005\055\030\056\037\001\002\000\064\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\013\uffe3\016\011" +
    "\017\025\020\uffe3\021\215\030\uffe3\031\uffe3\032\uffe3\033" +
    "\216\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\044\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002\000" +
    "\052\002\ufff5\005\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\045\ufff5\046\ufff5\047\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\001\002\000\004\054\uffd8\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\022\010\023\034\054\005" +
    "\055\030\056\037\001\002\000\056\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\013\ufff2\020\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2" +
    "\001\002\000\004\012\212\001\002\000\016\004\051\005" +
    "\052\006\054\007\053\011\050\031\211\001\002\000\004" +
    "\012\200\001\002\000\024\005\004\012\015\016\011\017" +
    "\025\022\010\023\034\054\005\055\030\056\037\001\002" +
    "\000\046\002\176\005\004\012\015\014\020\016\011\017" +
    "\025\022\010\023\034\024\014\026\033\027\012\030\017" +
    "\045\026\046\007\047\022\054\005\055\030\056\037\001" +
    "\002\000\044\005\uffb8\012\uffb8\014\uffb8\016\uffb8\017\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002" +
    "\000\046\005\ufffc\012\ufffc\014\ufffc\015\170\016\ufffc\017" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\054\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\050\002\uffff\005\uffff\012\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\022\uffff\023\uffff\024\uffff\026\uffff\027" +
    "\uffff\030\uffff\045\uffff\046\uffff\047\uffff\054\uffff\055\uffff" +
    "\056\uffff\001\002\000\004\054\uffd9\001\002\000\004\054" +
    "\167\001\002\000\026\005\004\012\015\016\011\017\025" +
    "\022\010\023\034\042\072\054\005\055\030\056\037\001" +
    "\002\000\056\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\013\ufff3\020\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\054\ufff3\001\002\000\004\012" +
    "\157\001\002\000\004\054\151\001\002\000\054\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\020\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\043\uffe1\044\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\001\002\000\052\002\ufff4\005\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\001\002\000\052\002\ufff7\005" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002" +
    "\000\024\005\uffbe\012\uffbe\016\uffbe\017\uffbe\022\uffbe\023" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\022\010\023\034\054\005\055" +
    "\030\056\037\001\002\000\024\005\004\012\117\016\011" +
    "\017\025\022\010\023\034\054\005\055\030\056\037\001" +
    "\002\000\044\005\uffba\012\uffba\014\uffba\016\uffba\017\uffba" +
    "\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\045" +
    "\uffba\046\uffba\047\uffba\054\uffba\055\uffba\056\uffba\001\002" +
    "\000\054\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\013" +
    "\uffe2\020\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\001\002\000\052\002\ufff6\005\ufff6" +
    "\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000" +
    "\006\031\043\032\042\001\002\000\004\054\045\001\002" +
    "\000\052\002\ufffd\005\ufffd\012\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\045\ufffd\046\ufffd\047\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\001\002\000\006\031\uffe0\032\062\001\002" +
    "\000\010\031\uffda\032\uffda\033\046\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\022\010\023\034\054\005" +
    "\055\030\056\037\001\002\000\020\004\051\005\052\006" +
    "\054\007\053\011\050\031\uffdb\032\uffdb\001\002\000\024" +
    "\005\004\012\015\016\011\017\025\022\010\023\034\054" +
    "\005\055\030\056\037\001\002\000\024\005\004\012\015" +
    "\016\011\017\025\022\010\023\034\054\005\055\030\056" +
    "\037\001\002\000\024\005\004\012\015\016\011\017\025" +
    "\022\010\023\034\054\005\055\030\056\037\001\002\000" +
    "\024\005\004\012\015\016\011\017\025\022\010\023\034" +
    "\054\005\055\030\056\037\001\002\000\024\005\004\012" +
    "\015\016\011\017\025\022\010\023\034\054\005\055\030" +
    "\056\037\001\002\000\054\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\011\uffef\013\uffef\020\uffef\030\uffef\031\uffef\032\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043" +
    "\uffef\044\uffef\050\uffef\051\uffef\052\uffef\001\002\000\054" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\013\uffee\020" +
    "\uffee\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\050\uffee\051" +
    "\uffee\052\uffee\001\002\000\054\004\ufff0\005\ufff0\006\054" +
    "\007\053\011\050\013\ufff0\020\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\043\ufff0\044\ufff0\050\ufff0\051\ufff0\052\ufff0\001\002\000" +
    "\054\004\ufff1\005\ufff1\006\054\007\053\011\050\013\ufff1" +
    "\020\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\001\002\000\054\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\011\uffed\013\uffed\020\uffed\030\uffed\031\uffed" +
    "\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\043\uffed\044\uffed\050\uffed\051\uffed\052\uffed\001\002" +
    "\000\004\054\045\001\002\000\006\031\uffdc\032\062\001" +
    "\002\000\044\005\004\012\015\014\020\016\011\017\025" +
    "\022\010\023\034\024\014\026\033\027\012\030\017\045" +
    "\026\046\007\047\022\054\005\055\030\056\037\001\002" +
    "\000\004\027\066\001\002\000\004\012\067\001\002\000" +
    "\026\005\004\012\015\016\011\017\025\022\010\023\034" +
    "\042\072\054\005\055\030\056\037\001\002\000\030\004" +
    "\051\005\052\006\054\007\053\011\050\034\104\035\102" +
    "\036\107\037\105\040\106\041\103\001\002\000\010\013" +
    "\100\043\075\044\074\001\002\000\026\005\004\012\015" +
    "\016\011\017\025\022\010\023\034\042\072\054\005\055" +
    "\030\056\037\001\002\000\012\013\uffd1\031\uffd1\043\uffd1" +
    "\044\uffd1\001\002\000\026\005\004\012\015\016\011\017" +
    "\025\022\010\023\034\042\072\054\005\055\030\056\037" +
    "\001\002\000\026\005\004\012\015\016\011\017\025\022" +
    "\010\023\034\042\072\054\005\055\030\056\037\001\002" +
    "\000\012\013\uffd0\031\uffd0\043\uffd0\044\uffd0\001\002\000" +
    "\012\013\uffcf\031\uffcf\043\uffcf\044\uffcf\001\002\000\004" +
    "\031\101\001\002\000\052\002\uffb9\005\uffb9\012\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\022\010\023\034\054\005\055" +
    "\030\056\037\001\002\000\024\005\004\012\015\016\011" +
    "\017\025\022\010\023\034\054\005\055\030\056\037\001" +
    "\002\000\024\005\004\012\015\016\011\017\025\022\010" +
    "\023\034\054\005\055\030\056\037\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\022\010\023\034\054\005" +
    "\055\030\056\037\001\002\000\024\005\004\012\015\016" +
    "\011\017\025\022\010\023\034\054\005\055\030\056\037" +
    "\001\002\000\024\005\004\012\015\016\011\017\025\022" +
    "\010\023\034\054\005\055\030\056\037\001\002\000\024" +
    "\004\051\005\052\006\054\007\053\011\050\013\uffd5\031" +
    "\uffd5\043\uffd5\044\uffd5\001\002\000\024\004\051\005\052" +
    "\006\054\007\053\011\050\013\uffd3\031\uffd3\043\uffd3\044" +
    "\uffd3\001\002\000\024\004\051\005\052\006\054\007\053" +
    "\011\050\013\uffd4\031\uffd4\043\uffd4\044\uffd4\001\002\000" +
    "\024\004\051\005\052\006\054\007\053\011\050\013\uffd7" +
    "\031\uffd7\043\uffd7\044\uffd7\001\002\000\024\004\051\005" +
    "\052\006\054\007\053\011\050\013\uffd2\031\uffd2\043\uffd2" +
    "\044\uffd2\001\002\000\024\004\051\005\052\006\054\007" +
    "\053\011\050\013\uffd6\031\uffd6\043\uffd6\044\uffd6\001\002" +
    "\000\020\004\051\005\052\006\054\007\053\011\050\050" +
    "\133\051\135\001\002\000\024\005\004\012\015\016\011" +
    "\017\025\022\010\023\034\054\005\055\030\056\037\001" +
    "\002\000\020\004\051\005\052\006\054\007\053\011\050" +
    "\013\121\031\122\001\002\000\054\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\013\uffe9\020\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\044\uffe9\050\uffe9\051\uffe9\052\uffe9\001\002" +
    "\000\026\005\uffc4\012\uffc4\016\uffc4\017\uffc4\022\uffc4\023" +
    "\uffc4\042\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\026" +
    "\005\004\012\015\016\011\017\025\022\010\023\034\042" +
    "\072\054\005\055\030\056\037\001\002\000\010\031\125" +
    "\043\075\044\074\001\002\000\024\005\uffc3\012\uffc3\016" +
    "\uffc3\017\uffc3\022\uffc3\023\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\001\002\000\024\005\004\012\015\016\011\017\025\022" +
    "\010\023\034\054\005\055\030\056\037\001\002\000\016" +
    "\004\051\005\052\006\054\007\053\011\050\013\130\001" +
    "\002\000\044\005\uffc2\012\uffc2\014\uffc2\016\uffc2\017\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002" +
    "\000\044\005\004\012\015\014\020\016\011\017\025\022" +
    "\010\023\034\024\014\026\033\027\012\030\017\045\026" +
    "\046\007\047\022\054\005\055\030\056\037\001\002\000" +
    "\052\002\uffc1\005\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\045\uffc1\046\uffc1\047\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\001\002\000\024\005\uffc0\012\uffc0\016\uffc0\017" +
    "\uffc0\022\uffc0\023\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002" +
    "\000\024\005\004\012\015\016\011\017\025\022\010\023" +
    "\034\054\005\055\030\056\037\001\002\000\024\005\uffbf" +
    "\012\uffbf\016\uffbf\017\uffbf\022\uffbf\023\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\001\002\000\020\004\051\005\052\006\054" +
    "\007\053\011\050\030\137\052\140\001\002\000\044\005" +
    "\uffc9\012\uffc9\014\uffc9\016\uffc9\017\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\026\uffc9\027\uffc9\030\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\024\005\uffc7" +
    "\012\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\024\005\004\012\015\016\011" +
    "\017\025\022\010\023\034\054\005\055\030\056\037\001" +
    "\002\000\016\004\051\005\052\006\054\007\053\011\050" +
    "\030\143\001\002\000\044\005\uffc6\012\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\045\uffc6\046\uffc6\047\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\044\005\004\012\015\014\020\016\011" +
    "\017\025\022\010\023\034\024\014\026\033\027\012\030" +
    "\017\045\026\046\007\047\022\054\005\055\030\056\037" +
    "\001\002\000\052\002\uffc5\005\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\045\uffc5\046\uffc5\047\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\001\002\000\044\005\004\012\015" +
    "\014\020\016\011\017\025\022\010\023\034\024\014\026" +
    "\033\027\012\030\017\045\026\046\007\047\022\054\005" +
    "\055\030\056\037\001\002\000\052\002\uffc8\005\uffc8\012" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000\054" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\013\uffea\020" +
    "\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea\050\uffea\051" +
    "\uffea\052\uffea\001\002\000\012\021\152\031\uffde\032\uffde" +
    "\033\153\001\002\000\004\055\155\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\022\010\023\034\054\005" +
    "\055\030\056\037\001\002\000\020\004\051\005\052\006" +
    "\054\007\053\011\050\031\uffdf\032\uffdf\001\002\000\004" +
    "\020\156\001\002\000\006\031\uffdd\032\uffdd\001\002\000" +
    "\024\005\004\012\015\016\011\017\025\022\010\023\034" +
    "\054\005\055\030\056\037\001\002\000\016\004\051\005" +
    "\052\006\054\007\053\011\050\013\161\001\002\000\004" +
    "\031\162\001\002\000\052\002\ufff8\005\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\010\013\164" +
    "\043\075\044\074\001\002\000\044\005\uffbd\012\uffbd\014" +
    "\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\045\uffbd\046\uffbd\047\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\044\005\004\012\015\014\020" +
    "\016\011\017\025\022\010\023\034\024\014\026\033\027" +
    "\012\030\017\045\026\046\007\047\022\054\005\055\030" +
    "\056\037\001\002\000\052\002\uffbc\005\uffbc\012\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000\054\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\013\uffe8\020\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\043\uffe8\044\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\001\002\000\052\002\ufff9\005\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\044\005\004\012" +
    "\015\014\020\016\011\017\025\022\010\023\034\024\014" +
    "\026\033\027\012\030\017\045\026\046\007\047\022\054" +
    "\005\055\030\056\037\001\002\000\046\005\004\012\015" +
    "\014\020\015\ufffb\016\011\017\025\022\010\023\034\024" +
    "\014\026\033\027\012\030\017\045\026\046\007\047\022" +
    "\054\005\055\030\056\037\001\002\000\004\015\175\001" +
    "\002\000\050\002\001\005\001\012\001\014\001\015\001" +
    "\016\001\017\001\022\001\023\001\024\001\026\001\027" +
    "\001\030\001\045\001\046\001\047\001\054\001\055\001" +
    "\056\001\001\002\000\052\002\ufffa\005\ufffa\012\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\004\002\000" +
    "\001\002\000\016\004\051\005\052\006\054\007\053\011" +
    "\050\013\121\001\002\000\026\005\004\012\015\016\011" +
    "\017\025\022\010\023\034\042\072\054\005\055\030\056" +
    "\037\001\002\000\010\013\202\043\075\044\074\001\002" +
    "\000\044\005\uffce\012\uffce\014\uffce\016\uffce\017\uffce\022" +
    "\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\045\uffce" +
    "\046\uffce\047\uffce\054\uffce\055\uffce\056\uffce\001\002\000" +
    "\044\005\004\012\015\014\020\016\011\017\025\022\010" +
    "\023\034\024\014\026\033\027\012\030\017\045\026\046" +
    "\007\047\022\054\005\055\030\056\037\001\002\000\052" +
    "\002\uffcd\005\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\045\uffcd\046\uffcd\047\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\052\002\uffca\005\uffca\012\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\206\026\uffca\027\uffca\030\uffca\045\uffca\046\uffca\047\uffca" +
    "\054\uffca\055\uffca\056\uffca\001\002\000\044\005\004\012" +
    "\015\014\020\016\011\017\025\022\010\023\034\024\014" +
    "\026\033\027\012\030\017\045\026\046\007\047\022\054" +
    "\005\055\030\056\037\001\002\000\052\002\uffcc\005\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000" +
    "\052\002\uffcb\005\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\045\uffcb\046\uffcb\047\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\052\002\ufffe\005\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\026\005\uffbb" +
    "\012\uffbb\016\uffbb\017\uffbb\022\uffbb\023\uffbb\042\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\001\002\000\054\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\013\uffeb\020\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\043\uffeb\044\uffeb\050\uffeb\051\uffeb\052\uffeb\001" +
    "\002\000\054\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\013\uffe7\020\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\001\002\000\024\005\004\012" +
    "\015\016\011\017\025\022\010\023\034\054\005\055\030" +
    "\056\037\001\002\000\024\005\004\012\015\016\011\017" +
    "\025\022\010\023\034\054\005\055\030\056\037\001\002" +
    "\000\054\004\051\005\052\006\054\007\053\011\050\013" +
    "\uffe4\020\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\001\002\000\016\004\051\005\052" +
    "\006\054\007\053\011\050\020\221\001\002\000\056\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013\uffe5\020\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\222\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\001\002\000\024\005\004\012\015\016" +
    "\011\017\025\022\010\023\034\054\005\055\030\056\037" +
    "\001\002\000\054\004\051\005\052\006\054\007\053\011" +
    "\050\013\uffe6\020\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\044" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000\054\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\011\uffec\013\uffec\020\uffec\030" +
    "\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\043\uffec\044\uffec\050\uffec\051\uffec\052" +
    "\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\034\002\015\003\026\004\022\005\020\006" +
    "\012\007\040\012\031\014\005\015\034\016\030\017\023" +
    "\020\037\021\035\001\001\000\006\004\022\006\223\001" +
    "\001\000\004\004\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\022\006\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\022\006\176\001\001\000\032\003\026\004" +
    "\022\005\173\006\012\007\040\012\031\014\005\015\034" +
    "\016\030\017\023\020\037\021\035\001\001\000\002\001" +
    "\001\000\004\023\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\022\006\067\022" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\022\006\147\001\001" +
    "\000\006\004\022\006\115\001\001\000\004\036\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\022\006\046\001\001" +
    "\000\002\001\001\000\006\004\022\006\060\001\001\000" +
    "\006\004\022\006\057\001\001\000\006\004\022\006\056" +
    "\001\001\000\006\004\022\006\055\001\001\000\006\004" +
    "\022\006\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\062\001\001\000\002\001\001\000\032\003\026" +
    "\004\022\005\064\006\012\007\040\012\031\014\005\015" +
    "\034\016\030\017\023\020\037\021\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\022\006\067\022" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\022\006\067\022\072\001\001\000\002\001\001\000" +
    "\010\004\022\006\067\022\076\001\001\000\010\004\022" +
    "\006\067\022\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\022" +
    "\006\114\001\001\000\006\004\022\006\113\001\001\000" +
    "\006\004\022\006\112\001\001\000\006\004\022\006\111" +
    "\001\001\000\006\004\022\006\110\001\001\000\006\004" +
    "\022\006\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\133\001\001\000\006\004\022" +
    "\006\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\122\001\001\000\010\004\022\006\067\022\123" +
    "\001\001\000\002\001\001\000\004\033\125\001\001\000" +
    "\006\004\022\006\126\001\001\000\002\001\001\000\004" +
    "\034\130\001\001\000\032\003\026\004\022\005\131\006" +
    "\012\007\040\012\031\014\005\015\034\016\030\017\023" +
    "\020\037\021\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\022\006\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\145\001\001\000\004\030" +
    "\140\001\001\000\006\004\022\006\141\001\001\000\002" +
    "\001\001\000\004\031\143\001\001\000\032\003\026\004" +
    "\022\005\144\006\012\007\040\012\031\014\005\015\034" +
    "\016\030\017\023\020\037\021\035\001\001\000\002\001" +
    "\001\000\032\003\026\004\022\005\146\006\012\007\040" +
    "\012\031\014\005\015\034\016\030\017\023\020\037\021" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\022\006\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\022\006\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\164\001\001\000\032\003\026\004\022\005\165\006" +
    "\012\007\040\012\031\014\005\015\034\016\030\017\023" +
    "\020\037\021\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\171\003\026\004\022" +
    "\005\020\006\012\007\040\012\031\014\005\015\034\016" +
    "\030\017\023\020\037\021\035\001\001\000\034\003\026" +
    "\004\022\005\173\006\012\007\040\012\031\014\005\015" +
    "\034\016\030\017\023\020\037\021\035\024\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\022\006\067" +
    "\022\200\001\001\000\002\001\001\000\004\025\202\001" +
    "\001\000\032\003\026\004\022\005\203\006\012\007\040" +
    "\012\031\014\005\015\034\016\030\017\023\020\037\021" +
    "\035\001\001\000\004\026\204\001\001\000\004\013\206" +
    "\001\001\000\032\003\026\004\022\005\207\006\012\007" +
    "\040\012\031\014\005\015\034\016\030\017\023\020\037" +
    "\021\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\022\006\217\001\001\000\006\004" +
    "\022\006\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\022\006\222\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parteDo ::= DO 
            {
              Labels RESULT =null;
		
								String uno = Generador.nuevaEtiq();
								RESULT = new Labels(uno,null);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expDo ::= parteDo NT$11 sentencia WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels pd = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
												Generador.escribir(Generador.LABEL,null,null,c.uno());
												Generador.escribir(Generador.GOTO,null,null,pd.uno());
												Generador.escribir(Generador.LABEL,null,null,c.dos());				
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expDo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$11 ::= 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Labels pd = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

												Generador.escribir(Generador.LABEL,null,null,pd.uno());
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parteWhile ::= WHILE AP 
            {
              Labels RESULT =null;
		
												String uno= Generador.nuevaEtiq();
												Generador.escribir(Generador.LABEL,null,null,uno);
												RESULT = new Labels(uno,null);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expWhile ::= parteWhile cond CP NT$10 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels pw = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
												Generador.escribir(Generador.GOTO,null,null,pw.uno());
												Generador.escribir(Generador.LABEL,null,null,c.dos());
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expWhile",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$10 ::= 
            {
              Object RESULT =null;
		int pwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels pw = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
	
												Generador.escribir(Generador.LABEL,null,null,c.uno());	
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parteFor ::= FOR 
            {
              Labels RESULT =null;
		
							String uno = Generador.nuevaEtiq();
							String dos = Generador.nuevaEtiq();
							RESULT = new Labels(uno, dos);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteFor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parteTo ::= DTO 
            {
              Integer RESULT =null;
		 RESULT=2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteTo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parteTo ::= TO 
            {
              Integer RESULT =null;
		 RESULT=1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteTo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expFor ::= parteFor AP exp PYC NT$7 cond PYC NT$8 exp CP NT$9 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
										Generador.escribir(Generador.GOTO, null, null, pf.dos());
										Generador.escribir(Generador.LABEL, null, null, c.dos());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
	
										Generador.escribir(Generador.GOTO, null, null, pf.uno());
										Generador.escribir(Generador.LABEL, null, null, c.uno());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
	Generador.escribir(Generador.LABEL, null, null, pf.dos());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$7 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
	Generador.escribir(Generador.LABEL, null, null, pf.uno());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expFor ::= parteFor exp parteTo exp ST NT$5 exp DO NT$6 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
														Generador.escribir(Generador.GOTO, null, null, pf.dos());
														Generador.escribir(Generador.LABEL, null, null, pf.tres());
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 For r=new For(p+4,a,c,pf);	
														pf=(Labels) r.res();											
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$5 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 For f=new For(p+2,a,b,pf);
														pf=(Labels) f.res();
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expFor ::= parteFor exp parteTo exp DO NT$4 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
														Generador.escribir(Generador.GOTO, null, null, pf.dos());
														Generador.escribir(Generador.LABEL, null, null, pf.tres());
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Labels pf = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 For f=new For(p,a,b,pf); 
														pf=(Labels) f.res();
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parteElse ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parteElse ::= ELSE sentencia 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expIf ::= IF AP cond CP NT$2 sentencia NT$3 parteElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
			Generador.escribir(Generador.LABEL, null, null, c.tres());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
      
									c.tres(Generador.nuevaEtiq());									          
                    				Generador.escribir(Generador.GOTO, null, null, c.tres());
                    				Generador.escribir(Generador.LABEL, null, null, c.dos());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 		
                    					Generador.escribir(Generador.LABEL, null, null, c.uno());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond AND cond 
            {
              Labels RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels c1 = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Labels c2 = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Cond c=new Cond('A',c1,c2);
									RESULT=c.res(); 
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= cond OR cond 
            {
              Labels RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Labels c1 = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Labels c2 = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Cond c=new Cond('O',c1,c2); 
									RESULT=c.res();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= NOT cond 
            {
              Labels RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Labels c = (Labels)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Labels(c.dos(), c.uno());	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= exp GE exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('E',b,a);			
									RESULT=c.res();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= exp GT exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('<',b,a);
									RESULT=c.res();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= exp LE exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('E',a,b);
									RESULT=c.res();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= exp LT exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('<',a,b);
									RESULT=c.res();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= exp NOTEQUAL exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('!',a,b);
										RESULT=c.res();
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= exp EQUAL exp 
            {
              Labels RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Cond c=new Cond('=',a,b);	
											RESULT=c.res();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= INT 
            {
              Character RESULT =null;
		 RESULT='I'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= FLOAT 
            {
              Character RESULT =null;
		 RESULT='F'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parteDeca ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Declara.addLista(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parteDeca ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Declara.addLista(i,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parteDeca ::= parteDeca COMA parteDeca 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declara ::= variable IDENT AC NUMERO CC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Array a=Arrays.GuardarVariable(i,v,n); 
						 	   RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declara ::= variable IDENT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v1=Variables.GuardarVariable(i,v); 
						 	  RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declara ::= variable IDENT ASIG exp 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v1=Variables.GuardarVariable(i,v);
						 	  Exp e=new Exp('=',a,i);
							  RESULT=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declara ::= declara COMA parteDeca 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Declara dc=new Declara(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= REAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= IDENT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Variables.ComprobarExiste(i1); 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
							Exp e=new Exp('=',a,v);
							RESULT=e;
						   }else{ Generador.escribir(40,null,null,null);}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= IDENT AC exp CC 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= IDENT AC exp CC ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= IDENT mmnn 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character m = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
						 	Exp e=new Exp(m,1,v); 
							RESULT=e; 
						   }else{ Generador.escribir(40,null,null,null);}
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= mmnn IDENT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character m = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
						 	if(m=='+'){ Generador.escribir(Generador.MAS,v.toString(),"1",v.toString());
							}else{	Generador.escribir(Generador.MENOS,v.toString(),"1",v.toString()); }
						   }else{ Generador.escribir(40,null,null,null);  }
						   RESULT=v;
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= AP exp CP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= CASFLOAT exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Exp e=new Exp('F',a,null);
						   RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= CASINT exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Exp e=new Exp('I',a,null);
						   RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= MENOS exp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('-',0,n);
						    RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('%',a,b);
						    RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp DIV exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('/',a,b);
						    RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('*',a,b);
						    RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('-',a,b);
						    RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Exp e=new Exp('+',a,b);
						    RESULT=e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mmnn ::= MENOSMENOS 
            {
              Character RESULT =null;
		 RESULT='-'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mmnn",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mmnn ::= MASMAS 
            {
              Character RESULT =null;
		 RESULT='+'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mmnn",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= expWhile 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= expFor 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= expDo 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= expIf 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Generador.escribir(Generador.PRINT, null, null, a.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= AL CL 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= AL NT$0 listaExp NT$1 CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Variables.CerrarLlave(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
  Variables.NuevaLlave(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declara PYC 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= exp PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaExp ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaExp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaExp ::= listaExp sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

