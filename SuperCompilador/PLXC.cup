import java_cup.runtime.*;
import src.*;
import src.exp.*;
import src.var.*;
import src.dec.*;
import src.cond.*;
import src.bucle.*;

//terminales
terminal	MAS,MENOS,POR,DIV,MENOSUNARIO,MOD;
terminal	AP,CP,AL,CL,MENOSMENOS,MASMAS,CC,AC;
terminal	CASINT,CASFLOAT;
terminal	IF,ELSE;
terminal	FOR;
terminal	WHILE,DO;
terminal	PYC,COMA;
terminal	ASIG;
terminal 	EQUAL,NOTEQUAL,LT,LE,GT,GE;
terminal	NOT,OR,AND;
terminal    	PRINT;
terminal	INT,FLOAT,TO,DTO,ST,IN;
terminal String	IDENT;
terminal Integer  NUMERO;
terminal Double  REAL;


/* No terminales */
non terminal         	listaExp;
non terminal Character	variable,mmnn;
non terminal Object 	sentencia,exp;
non terminal Object	declara,parteDeca;
non terminal Integer	parteTo;
non terminal         	expIf;
non terminal         	parteElse;
non terminal         	expFor;
non terminal Labels		parteFor;
non terminal			expWhile;
non terminal Labels		parteWhile;
non terminal 			expDo;
non terminal Labels		parteDo;
non terminal Labels 	cond;




/* Precedencia */
precedence nonassoc IF;
precedence nonassoc ELSE;
precedence left NOT,AND,OR;
precedence left NOTEQUAL,EQUAL,GT,LT,GE,LE;
precedence right ASIG,COMA;
precedence left MAS,MENOS;
precedence left POR,DIV,MOD;
precedence left MENOSUNARIO;
precedence right MENOSMENOS,MASMAS;
precedence left CASINT,CASFLOAT;

precedence left INT,FLOAT;

/* Gramatica */
listaExp	::= listaExp sentencia      
            	| sentencia
            	;

/*Lineas de sentencia de la gramatica*/
sentencia	::= exp:a PYC	 		{:  :}
		| declara PYC			{:  :}
		| AL 				{:  Variables.NuevaLlave(); :}
			listaExp:s 		{:  :}
			 CL			{:  Variables.CerrarLlave(); :} 
		| AL CL				{: :}
		| PRINT AP exp:a CP PYC		{: Generador.escribir(Generador.PRINT, null, null, a.toString()); :}	
		| expIf		{: :}
		| expDo		{: :}
		| expFor	{: :}
		| expWhile	{: :}			
		;

/*Expresiones*/
mmnn		::= MASMAS			{: RESULT='+'; :}
		| MENOSMENOS			{: RESULT='-'; :}
		;
	
exp     ::= exp:a MAS exp:b     	{:  Exp e=new Exp('+',a,b);
						    RESULT=e;	:}

       	| exp:a MENOS exp:b	   	{:  Exp e=new Exp('-',a,b);
						    RESULT=e; :}

       	| exp:a POR exp:b	     	{:  Exp e=new Exp('*',a,b);
						    RESULT=e;	:}

       	| exp:a DIV exp:b	     	{:  Exp e=new Exp('/',a,b);
						    RESULT=e;	:}

		| exp:a MOD exp:b	     	{:  Exp e=new Exp('%',a,b);
						    RESULT=e;	:}

	    | MENOS exp:n	          	{:  Exp e=new Exp('-',0,n);
						    RESULT=e;	:} %prec MENOSUNARIO

		| CASINT exp:a			{: Exp e=new Exp('I',a,null);
						   RESULT=e;	:}

		| CASFLOAT exp:a		{: Exp e=new Exp('F',a,null);
						   RESULT=e;	:}

       	| AP exp:a CP	          	{: RESULT=a; :}

		| mmnn:m IDENT:i		{: Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
						 	if(m=='+'){ Generador.escribir(Generador.MAS,v.toString(),"1",v.toString());
							}else{	Generador.escribir(Generador.MENOS,v.toString(),"1",v.toString()); }
						   }else{ Generador.escribir(40,null,null,null);  }
						   RESULT=v;
						 :}

		| IDENT:i mmnn:m		{: Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
						 	Exp e=new Exp(m,1,v); 
							RESULT=e; 
						   }else{ Generador.escribir(40,null,null,null);}
						 :}

		| IDENT:i AC exp:b CC ASIG exp:a {:

						 :}

	    | IDENT:i1 AC exp:a CC         	{: 
						 :}

	    | IDENT:i ASIG exp:a	  	{: Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
							Exp e=new Exp('=',a,v);
							RESULT=e;
						   }else{ Generador.escribir(40,null,null,null);}
						:}
	    | IDENT:i1              	{: RESULT = Variables.ComprobarExiste(i1); 	:}

		| REAL:r	              	{: RESULT = r; :}

	    	| NUMERO:n              	{: RESULT = n; :}

		;

/*Declaraciones de variables*/
declara		::= declara:d COMA parteDeca:p  {: Declara dc=new Declara(d); :}

		| variable:v IDENT:i ASIG exp:a 	{: Variable v1=Variables.GuardarVariable(i,v);
						 	  Exp e=new Exp('=',a,i);
							  RESULT=v1; :}
		| variable:v IDENT:i			{: Variable v1=Variables.GuardarVariable(i,v); 
						 	  RESULT=v1; :}		
		| variable:v IDENT:i AC NUMERO:n CC	{: Array a=Arrays.GuardarVariable(i,v,n); 
						 	   RESULT=a; :}		
		;


parteDeca	::= parteDeca:p1 COMA parteDeca:p2 {: :}
		| IDENT:i ASIG exp:a 		   {: Declara.addLista(i,a); :}
		| IDENT:i			   {: Declara.addLista(i); :}		
		;

/*Tipo variable que se puede declarar*/
variable	::= FLOAT	{: RESULT='F'; :}
		| INT		{: RESULT='I'; :}
		;		

/*Condiciones de comparacion*/

cond 		::= exp:a EQUAL exp:b		{:	Cond c=new Cond('=',a,b);	
											RESULT=c.res();
										:}

		| exp:a NOTEQUAL exp:b		{:	Cond c=new Cond('!',a,b);
										RESULT=c.res();
									:}
		
		| exp:a LT exp:b		{:	Cond c=new Cond('<',a,b);
									RESULT=c.res();
								:}
		
		| exp:a LE exp:b		{:	Cond c=new Cond('E',a,b);
									RESULT=c.res();
								:}
							
		| exp:a GT exp:b		{:	Cond c=new Cond('<',b,a);
									RESULT=c.res();
								:}
		
		| exp:a GE exp:b		{:	Cond c=new Cond('E',b,a);			
									RESULT=c.res();
								:}
		
		| NOT cond:c			{:	RESULT = new Labels(c.dos(), c.uno());	:}
									                 
		| cond:c1 OR cond:c2	{: Cond c=new Cond('O',c1,c2); 
									RESULT=c.res();
								:}
								
		| cond:c1 AND cond:c2	{: Cond c=new Cond('A',c1,c2);
									RESULT=c.res(); 
								:}
		
		;

		
/*Expresion if*/
expIf	::= IF AP cond:c CP  	{: 		
                    					Generador.escribir(Generador.LABEL, null, null, c.uno());
                				:} 
				sentencia		{:      
									c.tres(Generador.nuevaEtiq());									          
                    				Generador.escribir(Generador.GOTO, null, null, c.tres());
                    				Generador.escribir(Generador.LABEL, null, null, c.dos());
                				:}  
				parteElse 		{:	Generador.escribir(Generador.LABEL, null, null, c.tres());
                				:}
	 ;
			
parteElse	::= ELSE sentencia		{: :} 
    		| 				{: :}
            ;
            
/*Expresiones For*/
expFor		::= parteFor:pf exp:a parteTo:p exp:b DO{: For f=new For(p,a,b,pf); 
														pf=(Labels) f.res();
													:}				
							sentencia				{:
														Generador.escribir(Generador.GOTO, null, null, pf.dos());
														Generador.escribir(Generador.LABEL, null, null, pf.tres());
													:}
												
		| parteFor:pf exp:a parteTo:p exp:b ST		{: For f=new For(p+2,a,b,pf);
														pf=(Labels) f.res();
													:}
							exp:c DO				{: For r=new For(p+4,a,c,pf);	
														pf=(Labels) r.res();											
													:}				
							sentencia				{:
														Generador.escribir(Generador.GOTO, null, null, pf.dos());
														Generador.escribir(Generador.LABEL, null, null, pf.tres());
													:}
															
		| parteFor:pf AP exp:a PYC	{:	Generador.escribir(Generador.LABEL, null, null, pf.uno());
									:}
				cond:c PYC			{:	Generador.escribir(Generador.LABEL, null, null, pf.dos());
									:}
				exp:b CP			{:	
										Generador.escribir(Generador.GOTO, null, null, pf.uno());
										Generador.escribir(Generador.LABEL, null, null, c.uno());
									:}
				sentencia			{:
										Generador.escribir(Generador.GOTO, null, null, pf.dos());
										Generador.escribir(Generador.LABEL, null, null, c.dos());
									:}
		;

parteTo		::= TO				{: RESULT=1; :}
			| DTO				{: RESULT=2; :}
			;

parteFor	::= FOR		{:
							String uno = Generador.nuevaEtiq();
							String dos = Generador.nuevaEtiq();
							RESULT = new Labels(uno, dos);
						:}
			;
			
/*Expresion while*/

expWhile	::= parteWhile:pw cond:c CP	{:	
												Generador.escribir(Generador.LABEL,null,null,c.uno());	
											:}
							sentencia		{:
												Generador.escribir(Generador.GOTO,null,null,pw.uno());
												Generador.escribir(Generador.LABEL,null,null,c.dos());
											:}				
			;

parteWhile	::= WHILE AP					{:
												String uno= Generador.nuevaEtiq();
												Generador.escribir(Generador.LABEL,null,null,uno);
												RESULT = new Labels(uno,null);
											:}
			;

/*Expresion do --- while*/

expDo	 ::= parteDo:pd	 					{:
												Generador.escribir(Generador.LABEL,null,null,pd.uno());
											:}
				sentencia WHILE AP cond:c CP PYC	{: 
												Generador.escribir(Generador.LABEL,null,null,c.uno());
												Generador.escribir(Generador.GOTO,null,null,pd.uno());
												Generador.escribir(Generador.LABEL,null,null,c.dos());				
											:}
		;

parteDo		::= DO			{:
								String uno = Generador.nuevaEtiq();
								RESULT = new Labels(uno,null);
							:}
		;			






