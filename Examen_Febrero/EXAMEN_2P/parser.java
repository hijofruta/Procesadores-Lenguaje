
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 31 16:34:54 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 31 16:34:54 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\003\000\002\004\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\005\000\002\003\004\000\002\003" +
    "\004\000\002\003\007\000\002\003\005\000\002\003\003" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\006\005\000\002\006\006\000\002\006\006\000\002" +
    "\006\004\000\002\010\005\000\002\010\005\000\002\010" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\004" +
    "\000\002\007\004\000\002\024\002\000\002\025\002\000" +
    "\002\007\007\000\002\007\004\000\002\007\007\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\026\002\000\002\027\002\000\002\012\011" +
    "\000\002\013\004\000\002\014\004\000\002\014\002\000" +
    "\002\030\002\000\002\015\011\000\002\031\002\000\002" +
    "\032\002\000\002\015\014\000\002\033\002\000\002\034" +
    "\002\000\002\035\002\000\002\015\016\000\002\011\003" +
    "\000\002\011\003\000\002\016\003\000\002\036\002\000" +
    "\002\017\007\000\002\020\004\000\002\037\002\000\002" +
    "\021\012\000\002\022\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\040\002\000" +
    "\002\023\006\000\002\041\002\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\044\005\004\012\015\014\020\016\011\017" +
    "\025\021\010\022\034\023\014\025\036\026\012\027\017" +
    "\044\027\045\007\046\022\052\005\053\026\054\040\001" +
    "\002\000\024\005\004\012\015\016\011\017\025\021\010" +
    "\022\034\052\005\053\026\054\040\001\002\000\076\004" +
    "\uffef\005\004\006\uffef\007\uffef\011\uffef\012\015\013\uffef" +
    "\016\011\017\025\020\uffef\021\010\022\034\027\uffef\030" +
    "\uffef\031\uffef\032\220\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\005\053\026\054\040\001\002\000\052\002\uffd9" +
    "\005\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\052\uffd9\053\uffd9\054\uffd9\001" +
    "\002\000\004\052\uffe3\001\002\000\024\005\004\012\015" +
    "\016\011\017\025\021\010\022\034\052\005\053\026\054" +
    "\040\001\002\000\056\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\011\ufffd\013\ufffd\020\ufffd\027\ufffd\030\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd" +
    "\043\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000" +
    "\004\012\214\001\002\000\016\004\053\005\054\006\056" +
    "\007\055\011\052\030\213\001\002\000\004\012\212\001" +
    "\002\000\024\005\004\012\015\016\011\017\025\021\010" +
    "\022\034\052\005\053\026\054\040\001\002\000\046\002" +
    "\210\005\004\012\015\014\020\016\011\017\025\021\010" +
    "\022\034\023\014\025\036\026\012\027\017\044\027\045" +
    "\007\046\022\052\005\053\026\054\040\001\002\000\044" +
    "\005\uffc0\012\uffc0\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\052\uffc0\053\uffc0\054\uffc0\001\002\000\046\005" +
    "\uffe0\012\uffe0\014\uffe0\015\202\016\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\052\uffe0\053\uffe0\054\uffe0\001\002\000\050" +
    "\002\uffff\005\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\021\uffff\022\uffff\023\uffff\025\uffff\026\uffff\027\uffff" +
    "\044\uffff\045\uffff\046\uffff\052\uffff\053\uffff\054\uffff\001" +
    "\002\000\004\052\uffe4\001\002\000\004\052\201\001\002" +
    "\000\026\005\004\012\015\016\011\017\025\021\010\022" +
    "\034\041\073\052\005\053\026\054\040\001\002\000\056" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\013\ufffe\020" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\001\002\000\054\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\011\uffec\013\uffec\020\uffec\027\uffec\030" +
    "\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\042\uffec\043\uffec\047\uffec\050\uffec\051\uffec\001" +
    "\002\000\004\012\171\001\002\000\004\052\164\001\002" +
    "\000\026\005\004\012\015\016\011\017\025\021\010\022" +
    "\034\041\073\052\005\053\026\054\040\001\002\000\052" +
    "\002\uffd8\005\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\001\002\000\052\002\uffdb\005\uffdb\012\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\001\002\000\024\005\004\012" +
    "\015\016\011\017\025\021\010\022\034\052\005\053\026" +
    "\054\040\001\002\000\024\005\004\012\122\016\011\017" +
    "\025\021\010\022\034\052\005\053\026\054\040\001\002" +
    "\000\024\005\uffc6\012\uffc6\016\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\044\005\uffc2" +
    "\012\uffc2\014\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\001\002\000\054\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\013\uffed\020\uffed\027\uffed" +
    "\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\042\uffed\043\uffed\047\uffed\050\uffed\051\uffed" +
    "\001\002\000\052\002\uffda\005\uffda\012\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\044\uffda\045\uffda\046\uffda\052" +
    "\uffda\053\uffda\054\uffda\001\002\000\006\030\044\031\043" +
    "\001\002\000\004\052\046\001\002\000\052\002\uffe1\005" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\052\uffe1\053\uffe1\054\uffe1\001\002" +
    "\000\006\030\uffeb\031\uffeb\001\002\000\010\030\uffe5\031" +
    "\047\032\050\001\002\000\004\052\046\001\002\000\024" +
    "\005\004\012\015\016\011\017\025\021\010\022\034\052" +
    "\005\053\026\054\040\001\002\000\020\004\053\005\054" +
    "\006\056\007\055\011\052\030\uffe6\031\uffe6\001\002\000" +
    "\024\005\004\012\015\016\011\017\025\021\010\022\034" +
    "\052\005\053\026\054\040\001\002\000\024\005\004\012" +
    "\015\016\011\017\025\021\010\022\034\052\005\053\026" +
    "\054\040\001\002\000\024\005\004\012\015\016\011\017" +
    "\025\021\010\022\034\052\005\053\026\054\040\001\002" +
    "\000\024\005\004\012\015\016\011\017\025\021\010\022" +
    "\034\052\005\053\026\054\040\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\021\010\022\034\052\005\053" +
    "\026\054\040\001\002\000\054\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\013\ufffa\020\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\042\ufffa\043\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000" +
    "\054\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\013\ufff9" +
    "\020\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9\043\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\001\002\000\054\004\ufffb\005\ufffb\006" +
    "\056\007\055\011\052\013\ufffb\020\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\042\ufffb\043\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002" +
    "\000\054\004\ufffc\005\ufffc\006\056\007\055\011\052\013" +
    "\ufffc\020\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\054\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\011\ufff8\013\ufff8\020\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\047\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\006\030\uffe7\031\uffe7\001\002\000\044\005\004" +
    "\012\015\014\020\016\011\017\025\021\010\022\034\023" +
    "\014\025\036\026\012\027\017\044\027\045\007\046\022" +
    "\052\005\053\026\054\040\001\002\000\004\026\067\001" +
    "\002\000\004\012\070\001\002\000\026\005\004\012\015" +
    "\016\011\017\025\021\010\022\034\041\073\052\005\053" +
    "\026\054\040\001\002\000\030\004\053\005\054\006\056" +
    "\007\055\011\052\033\107\034\105\035\112\036\110\037" +
    "\111\040\106\001\002\000\010\013\103\042\076\043\075" +
    "\001\002\000\026\005\004\012\015\016\011\017\025\021" +
    "\010\022\034\041\073\052\005\053\026\054\040\001\002" +
    "\000\012\013\uffb9\030\uffb9\042\uffb9\043\uffb9\001\002\000" +
    "\026\005\uffb6\012\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\041\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000\026\005" +
    "\uffb8\012\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\041\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\001\002\000\026\005\004\012" +
    "\015\016\011\017\025\021\010\022\034\041\073\052\005" +
    "\053\026\054\040\001\002\000\012\013\uffb7\030\uffb7\042" +
    "\uffb7\043\uffb7\001\002\000\026\005\004\012\015\016\011" +
    "\017\025\021\010\022\034\041\073\052\005\053\026\054" +
    "\040\001\002\000\012\013\uffb5\030\uffb5\042\uffb5\043\uffb5" +
    "\001\002\000\004\030\104\001\002\000\052\002\uffc1\005" +
    "\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002" +
    "\000\024\005\004\012\015\016\011\017\025\021\010\022" +
    "\034\052\005\053\026\054\040\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\021\010\022\034\052\005\053" +
    "\026\054\040\001\002\000\024\005\004\012\015\016\011" +
    "\017\025\021\010\022\034\052\005\053\026\054\040\001" +
    "\002\000\024\005\004\012\015\016\011\017\025\021\010" +
    "\022\034\052\005\053\026\054\040\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\021\010\022\034\052\005" +
    "\053\026\054\040\001\002\000\024\005\004\012\015\016" +
    "\011\017\025\021\010\022\034\052\005\053\026\054\040" +
    "\001\002\000\024\004\053\005\054\006\056\007\055\011" +
    "\052\013\uffbd\030\uffbd\042\uffbd\043\uffbd\001\002\000\024" +
    "\004\053\005\054\006\056\007\055\011\052\013\uffbb\030" +
    "\uffbb\042\uffbb\043\uffbb\001\002\000\024\004\053\005\054" +
    "\006\056\007\055\011\052\013\uffbc\030\uffbc\042\uffbc\043" +
    "\uffbc\001\002\000\024\004\053\005\054\006\056\007\055" +
    "\011\052\013\uffbf\030\uffbf\042\uffbf\043\uffbf\001\002\000" +
    "\024\004\053\005\054\006\056\007\055\011\052\013\uffba" +
    "\030\uffba\042\uffba\043\uffba\001\002\000\024\004\053\005" +
    "\054\006\056\007\055\011\052\013\uffbe\030\uffbe\042\uffbe" +
    "\043\uffbe\001\002\000\020\004\053\005\054\006\056\007" +
    "\055\011\052\047\137\050\140\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\021\010\022\034\052\005\053" +
    "\026\054\040\001\002\000\020\004\053\005\054\006\056" +
    "\007\055\011\052\013\124\030\125\001\002\000\054\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4\020\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\026\005\uffcc\012\uffcc\016\uffcc\017" +
    "\uffcc\021\uffcc\022\uffcc\041\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\001\002\000\026\005\004\012\015\016\011\017\025\021" +
    "\010\022\034\041\073\052\005\053\026\054\040\001\002" +
    "\000\010\030\130\042\076\043\075\001\002\000\024\005" +
    "\uffcb\012\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\001\002\000\024\005\004\012\015\016" +
    "\011\017\025\021\010\022\034\052\005\053\026\054\040" +
    "\001\002\000\016\004\053\005\054\006\056\007\055\011" +
    "\052\013\133\001\002\000\044\005\uffca\012\uffca\014\uffca" +
    "\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\025\uffca\026" +
    "\uffca\027\uffca\044\uffca\045\uffca\046\uffca\052\uffca\053\uffca" +
    "\054\uffca\001\002\000\044\005\004\012\015\014\020\016" +
    "\011\017\025\021\010\022\034\023\014\025\036\026\012" +
    "\027\017\044\027\045\007\046\022\052\005\053\026\054" +
    "\040\001\002\000\052\002\uffc9\005\uffc9\012\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\001\002\000\024\005\004\012" +
    "\015\016\011\017\025\021\010\022\034\052\005\053\026" +
    "\054\040\001\002\000\024\005\uffc8\012\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002" +
    "\000\024\005\uffc7\012\uffc7\016\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002\000\020\004\053" +
    "\005\054\006\056\007\055\011\052\027\142\051\143\001" +
    "\002\000\044\005\uffd1\012\uffd1\014\uffd1\016\uffd1\017\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002" +
    "\000\024\005\uffcf\012\uffcf\016\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\024\005\004" +
    "\012\015\016\011\017\025\021\010\022\034\052\005\053" +
    "\026\054\040\001\002\000\016\004\053\005\054\006\056" +
    "\007\055\011\052\027\146\001\002\000\044\005\uffce\012" +
    "\uffce\014\uffce\016\uffce\017\uffce\021\uffce\022\uffce\023\uffce" +
    "\025\uffce\026\uffce\027\uffce\044\uffce\045\uffce\046\uffce\052" +
    "\uffce\053\uffce\054\uffce\001\002\000\044\005\004\012\015" +
    "\014\020\016\011\017\025\021\010\022\034\023\014\025" +
    "\036\026\012\027\017\044\027\045\007\046\022\052\005" +
    "\053\026\054\040\001\002\000\052\002\uffcd\005\uffcd\012" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\044" +
    "\005\004\012\015\014\020\016\011\017\025\021\010\022" +
    "\034\023\014\025\036\026\012\027\017\044\027\045\007" +
    "\046\022\052\005\053\026\054\040\001\002\000\052\002" +
    "\uffd0\005\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\001\002\000\054\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\013\ufff5\020\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002\000\010\013\155" +
    "\042\076\043\075\001\002\000\044\005\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\044\uffd7\045\uffd7\046\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\001\002\000\044\005\004\012\015\014\020" +
    "\016\011\017\025\021\010\022\034\023\014\025\036\026" +
    "\012\027\017\044\027\045\007\046\022\052\005\053\026" +
    "\054\040\001\002\000\052\002\uffd6\005\uffd6\012\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\052\002\uffd2" +
    "\005\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\161\025\uffd2\026\uffd2\027\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\052\uffd2\053\uffd2\054\uffd2\001" +
    "\002\000\044\005\004\012\015\014\020\016\011\017\025" +
    "\021\010\022\034\023\014\025\036\026\012\027\017\044" +
    "\027\045\007\046\022\052\005\053\026\054\040\001\002" +
    "\000\052\002\uffd5\005\uffd5\012\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\044\uffd5\045\uffd5\046\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\001\002\000\052\002\uffd3\005\uffd3\012\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\052\uffd3\053\uffd3\054\uffd3\001\002\000\012\030" +
    "\uffe8\031\uffe8\032\166\053\165\001\002\000\004\020\170" +
    "\001\002\000\024\005\004\012\015\016\011\017\025\021" +
    "\010\022\034\052\005\053\026\054\040\001\002\000\020" +
    "\004\053\005\054\006\056\007\055\011\052\030\uffea\031" +
    "\uffea\001\002\000\006\030\uffe9\031\uffe9\001\002\000\024" +
    "\005\004\012\015\016\011\017\025\021\010\022\034\052" +
    "\005\053\026\054\040\001\002\000\016\004\053\005\054" +
    "\006\056\007\055\011\052\013\173\001\002\000\004\030" +
    "\174\001\002\000\052\002\uffdc\005\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\001\002\000\010\013\176\042" +
    "\076\043\075\001\002\000\044\005\uffc5\012\uffc5\014\uffc5" +
    "\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\044\uffc5\045\uffc5\046\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\001\002\000\044\005\004\012\015\014\020\016" +
    "\011\017\025\021\010\022\034\023\014\025\036\026\012" +
    "\027\017\044\027\045\007\046\022\052\005\053\026\054" +
    "\040\001\002\000\052\002\uffc4\005\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\001\002\000\054\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\020\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\042\ufff3\043\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\001\002\000\052\002\uffdd\005\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\044\uffdd\045\uffdd\046\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\001\002\000\044\005\004\012\015" +
    "\014\020\016\011\017\025\021\010\022\034\023\014\025" +
    "\036\026\012\027\017\044\027\045\007\046\022\052\005" +
    "\053\026\054\040\001\002\000\046\005\004\012\015\014" +
    "\020\015\uffdf\016\011\017\025\021\010\022\034\023\014" +
    "\025\036\026\012\027\017\044\027\045\007\046\022\052" +
    "\005\053\026\054\040\001\002\000\004\015\207\001\002" +
    "\000\050\002\001\005\001\012\001\014\001\015\001\016" +
    "\001\017\001\021\001\022\001\023\001\025\001\026\001" +
    "\027\001\044\001\045\001\046\001\052\001\053\001\054" +
    "\001\001\002\000\052\002\uffde\005\uffde\012\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\044\uffde\045\uffde\046\uffde" +
    "\052\uffde\053\uffde\054\uffde\001\002\000\004\002\000\001" +
    "\002\000\016\004\053\005\054\006\056\007\055\011\052" +
    "\013\124\001\002\000\026\005\uffd4\012\uffd4\016\uffd4\017" +
    "\uffd4\021\uffd4\022\uffd4\041\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\001\002\000\052\002\uffe2\005\uffe2\012\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\044\uffe2\045\uffe2\046\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\001\002\000\026\005\uffc3\012\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\041\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\054\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\013\ufff6\020\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\042\ufff6\043\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002\000" +
    "\056\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\020\ufff2\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\201\001\002\000\016\004\053\005" +
    "\054\006\056\007\055\011\052\020\222\001\002\000\024" +
    "\005\004\012\015\016\011\017\025\021\010\022\034\052" +
    "\005\053\026\054\040\001\002\000\054\004\053\005\054" +
    "\006\056\007\055\011\052\013\ufff0\020\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\047\ufff0\050\ufff0\051\ufff0\001" +
    "\002\000\056\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\013\uffee\020\uffee\027\uffee\030\uffee\031\uffee\032\223\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee" +
    "\043\uffee\047\uffee\050\uffee\051\uffee\001\002\000\024\005" +
    "\004\012\015\016\011\017\025\021\010\022\034\052\005" +
    "\053\026\054\040\001\002\000\054\004\053\005\054\006" +
    "\056\007\055\011\052\013\ufff1\020\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002" +
    "\000\054\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\020\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\036\002\015\003\012\004\022\005\027\006" +
    "\041\007\020\012\032\013\030\015\005\016\034\017\031" +
    "\020\023\021\040\022\036\001\001\000\006\003\224\004" +
    "\022\001\001\000\006\003\216\004\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\214\004\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\210\004\022\001\001\000" +
    "\034\003\012\004\022\005\027\006\041\007\205\012\032" +
    "\013\030\015\005\016\034\017\031\020\023\021\040\022" +
    "\036\001\001\000\002\001\001\000\004\024\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\070\004\022\023\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\070\004\022\023\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\152\004\022\001\001\000" +
    "\006\003\120\004\022\001\001\000\002\001\001\000\004" +
    "\037\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\063\001" +
    "\001\000\006\003\050\004\022\001\001\000\002\001\001" +
    "\000\006\003\062\004\022\001\001\000\006\003\061\004" +
    "\022\001\001\000\006\003\060\004\022\001\001\000\006" +
    "\003\057\004\022\001\001\000\006\003\056\004\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\012\004\022\005\027\006\041\007\065\012\032" +
    "\013\030\015\005\016\034\017\031\020\023\021\040\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\070\004\022\023\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\070\004\022\023\073\001\001" +
    "\000\002\001\001\000\004\041\100\001\001\000\004\040" +
    "\076\001\001\000\010\003\070\004\022\023\077\001\001" +
    "\000\002\001\001\000\010\003\070\004\022\023\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\117\004\022\001\001\000\006\003\116\004" +
    "\022\001\001\000\006\003\115\004\022\001\001\000\006" +
    "\003\114\004\022\001\001\000\006\003\113\004\022\001" +
    "\001\000\006\003\112\004\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\135\001\001" +
    "\000\006\003\122\004\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\125\001\001\000\010\003\070" +
    "\004\022\023\126\001\001\000\002\001\001\000\004\034" +
    "\130\001\001\000\006\003\131\004\022\001\001\000\002" +
    "\001\001\000\004\035\133\001\001\000\034\003\012\004" +
    "\022\005\027\006\041\007\134\012\032\013\030\015\005" +
    "\016\034\017\031\020\023\021\040\022\036\001\001\000" +
    "\002\001\001\000\006\003\140\004\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\150\001\001\000\004\031\143\001\001\000\006\003\144" +
    "\004\022\001\001\000\002\001\001\000\004\032\146\001" +
    "\001\000\034\003\012\004\022\005\027\006\041\007\147" +
    "\012\032\013\030\015\005\016\034\017\031\020\023\021" +
    "\040\022\036\001\001\000\002\001\001\000\034\003\012" +
    "\004\022\005\027\006\041\007\151\012\032\013\030\015" +
    "\005\016\034\017\031\020\023\021\040\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\155\001\001\000\034\003\012\004\022\005\027" +
    "\006\041\007\156\012\032\013\030\015\005\016\034\017" +
    "\031\020\023\021\040\022\036\001\001\000\004\027\157" +
    "\001\001\000\004\014\161\001\001\000\034\003\012\004" +
    "\022\005\027\006\041\007\162\012\032\013\030\015\005" +
    "\016\034\017\031\020\023\021\040\022\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\166\004\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\171\004\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\176\001\001\000\034\003\012" +
    "\004\022\005\027\006\041\007\177\012\032\013\030\015" +
    "\005\016\034\017\031\020\023\021\040\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\203\003\012\004\022\005\027\006\041\007\020" +
    "\012\032\013\030\015\005\016\034\017\031\020\023\021" +
    "\040\022\036\001\001\000\036\003\012\004\022\005\027" +
    "\006\041\007\205\012\032\013\030\015\005\016\034\017" +
    "\031\020\023\021\040\022\036\025\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\220\004\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\223\004\022\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= cond AND NT$13 cond 
            {
              DosLabel RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (DosLabel) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosLabel c1 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosLabel c2 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							Generador.escribir(Generador.LABEL, null, null, c1.Label2());
							Generador.escribir(Generador.GOTO, null, null, c2.Label2());
							RESULT = new DosLabel(c2.Label1(), c2.Label2());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$13 ::= 
            {
              DosLabel RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosLabel c1 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							Generador.escribir(Generador.LABEL, null, null, c1.Label1());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond ::= cond OR NT$12 cond 
            {
              DosLabel RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (DosLabel) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosLabel c1 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosLabel c2 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							Generador.escribir(Generador.LABEL, null, null, c1.Label1());
							Generador.escribir(Generador.GOTO, null, null, c2.Label1());
							RESULT = new DosLabel(c2.Label1(), c2.Label2());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$12 ::= 
            {
              DosLabel RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosLabel c1 = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							Generador.escribir(Generador.LABEL, null, null, c1.Label2());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond ::= NOT cond 
            {
              DosLabel RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT = new DosLabel(c.Label2(), c.Label1());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond ::= exp GE exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFLT, a, b, y);
							Generador.escribir(Generador.GOTO, null, null, x);
                                                        RESULT = new DosLabel(x,y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= exp GT exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFLT, b,a, x);
							Generador.escribir(Generador.GOTO, null, null,y);
                                                        RESULT = new DosLabel(x, y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= exp LE exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFLT, a, b, y);
							Generador.escribir(Generador.GOTO, null, null, x);
                                                        RESULT = new DosLabel(x,y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= exp LT exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFLT, a, b, x);
							Generador.escribir(Generador.GOTO, null, null, y);
                                                        RESULT = new DosLabel(x, y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= exp NOTEQUAL exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFEQ, a, b, y);
							Generador.escribir(Generador.GOTO, null, null, x);
                                                        RESULT = new DosLabel(x,y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= exp EQUAL exp 
            {
              DosLabel RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.IFEQ, a, b, x);
							Generador.escribir(Generador.GOTO, null, null, y);
                                                        RESULT = new DosLabel(x,y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parteDo ::= DO 
            {
              LabelRedir RESULT =null;
		
								String ini = Generador.nuevaEtiq();
								RESULT = new LabelRedir(ini,null);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expDo ::= parteDo NT$11 sentencia WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LabelRedir pd = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								Generador.escribir(Generador.LABEL,null,null,c.Label1());
								Generador.escribir(Generador.GOTO,null,null,pd.Labelini());
								Generador.escribir(Generador.LABEL,null,null,c.Label2());				
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expDo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$11 ::= 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LabelRedir pd = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.escribir(Generador.LABEL,null,null,pd.Labelini());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parteWhile ::= WHILE AP 
            {
              LabelRedir RESULT =null;
		
								String ini= Generador.nuevaEtiq();
								Generador.escribir(Generador.LABEL,null,null,ini);
								RESULT = new LabelRedir(ini,null);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteWhile",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expWhile ::= parteWhile cond CP NT$10 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LabelRedir pw = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.escribir(Generador.GOTO,null,null,pw.Labelini());
								Generador.escribir(Generador.LABEL,null,null,c.Label2());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$10 ::= 
            {
              Object RESULT =null;
		int pwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelRedir pw = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.escribir(Generador.LABEL,null,null,c.Label1());	
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parteFor ::= FOR 
            {
              LabelRedir RESULT =null;
		
							String ini = Generador.nuevaEtiq();
							String fin = Generador.nuevaEtiq();
							RESULT = new LabelRedir(ini, fin);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteFor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parteTo ::= DTO 
            {
              String RESULT =null;
		 RESULT="0"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteTo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parteTo ::= TO 
            {
              String RESULT =null;
		 RESULT="1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteTo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expFor ::= parteFor AP exp PYC NT$7 cond PYC NT$8 exp CP NT$9 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
							Generador.escribir(Generador.GOTO, null, null, pf.Labelfin());
							Generador.escribir(Generador.LABEL, null, null, c.Label2());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							Generador.escribir(Generador.GOTO, null, null, pf.Labelini());
							Generador.escribir(Generador.LABEL, null, null, c.Label1());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							Generador.escribir(Generador.LABEL, null, null, pf.Labelfin());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$7 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							Generador.escribir(Generador.LABEL, null, null, pf.Labelini());

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expFor ::= parteFor exp parteTo exp ST NT$5 exp DO NT$6 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
							Generador.escribir(Generador.GOTO, null, null, pf.Labelfin());
							Generador.escribir(Generador.LABEL, null, null, pf.tercera());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							if(p.compareTo("1")==0)
								Generador.escribir(Generador.MAS,a, c, a);
							else
								Generador.escribir(Generador.MENOS,a, c,a);						
							Generador.escribir(Generador.GOTO, null, null, pf.Labelini());
							Generador.escribir(Generador.LABEL, null, null, pf.cuarta());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$5 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.LABEL,null,null,pf.Labelini());
							if(p.compareTo("1")==0){
								Generador.escribir(Generador.IFLT, b, a, y);
							}else if(p.compareTo("0")==0){
								Generador.escribir(Generador.IFLT, a, b, y);	
							}				
							Generador.escribir(Generador.GOTO, null, null, x);				
							Generador.escribir(Generador.LABEL, null, null, pf.Labelfin());
							pf.tercera(y);
							pf.cuarta(x);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expFor ::= parteFor exp parteTo exp DO NT$4 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
							Generador.escribir(Generador.GOTO, null, null, pf.Labelfin());
							Generador.escribir(Generador.LABEL, null, null, pf.tercera());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LabelRedir pf = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

							String x = Generador.nuevaEtiq();
							String y = Generador.nuevaEtiq();
							Generador.escribir(Generador.LABEL, null, null, pf.Labelini());
							if(p.compareTo("1")==0){
								Generador.escribir(Generador.IFLT, b, a, y);
							}else if(p.compareTo("0")==0){
								Generador.escribir(Generador.IFLT, a, b, y);
							}					
							Generador.escribir(Generador.GOTO, null, null, x);				
							Generador.escribir(Generador.LABEL, null, null, pf.Labelfin());
							if(p.compareTo("1")==0)
								Generador.escribir(Generador.MAS,a, "1", a);
							else
								Generador.escribir(Generador.MENOS,a, "1", a);
							Generador.escribir(Generador.GOTO, null, null, pf.Labelini());
							Generador.escribir(Generador.LABEL, null, null, x);
							pf.tercera(y);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parteElse ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parteElse ::= ELSE sentencia 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parteIf ::= IF AP 
            {
              LabelRedir RESULT =null;
		
						    	RESULT = new LabelRedir(null, null);
               					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteIf",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expIf ::= parteIf cond CP NT$2 sentencia NT$3 parteElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LabelRedir pi = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    					Generador.escribir(Generador.LABEL, null, null, pi.Labelfin());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LabelRedir pi = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
      
							String fin = Generador.nuevaEtiq();
							pi.fin(fin);           
                    					Generador.escribir(Generador.GOTO, null, null, pi.Labelfin());
                    					Generador.escribir(Generador.LABEL, null, null, c.Label2());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelRedir pi = (LabelRedir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosLabel c = (DosLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    					Generador.escribir(Generador.LABEL, null, null, c.Label1());
                				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= expWhile 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= expFor 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= expDo 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= expIf 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
							Generador.escribir(Generador.PRINT, null, null, a);
							
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= AL CL 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= AL NT$0 listaExp NT$1 CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Variables.CerrarLlave(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              Object RESULT =null;
  Variables.NuevaLlave(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= declara PYC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= exp PYC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= INT 
            {
              Character RESULT =null;
		 RESULT='I'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable ::= FLOAT 
            {
              Character RESULT =null;
		 RESULT='F'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parteDeca ::= IDENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
							if(Variables.ComprobarCrear(e)){
								Generador.escribir(40,null,null,null);
							}else{												
								RESULT=e;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parteDeca ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
							if(Variables.ComprobarCrear(i1)){
								Generador.escribir(Generador.ASIG, a, null, i1);
							}else{ 								
								Generador.escribir(Generador.ASIG, a, null,i1);
							}							
							RESULT = i1; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parteDeca ::= IDENT COMA parteDeca 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
							if(Variables.ComprobarCrear(i1)){
								Generador.escribir(40,null,null,null);
							}else{ 
								Variables.GuardarVariable(i1,'I');
							}							
							RESULT = a; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteDeca",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declara ::= variable IDENT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable x=null;							  
							   if(Variables.ComprobarCrear(i1)){
								Generador.escribir(40,null,null,null);							
							   }else{ 
								x=Variables.GuardarVariable(i1,v);
							   }							
							   RESULT = x; 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declara ::= variable IDENT NUMERO CC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Variable x=null;							  
							   if(Variables.ComprobarCrear(i1)){
								Generador.escribir(40,null,null,null);							
							   }else{ 
								x=Variables.GuardarVariable(i1,v);
								x.topeArray(n);
							   }							
							   RESULT = x; 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declara ::= variable IDENT ASIG exp 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable x=null;
							   Variable y=null;
							   if(Variables.ComprobarCrear(i1)){
								Generador.escribir(40,null,null,null);							
							   }else{ 
								x=Variables.GuardarVariable(i1,v);
								if(Variables.TipoVariable(a)=='V'){ y=(Variable) a;}
		/*si I y A son variables mismo tipo*/		if(y!=null && y.tipoVar()==x.tipoVar()){   Generador.escribir(Generador.ASIG,y,'N',x);
		/*cuando es de int -> float*/			}else if(y!=null && y.tipoVar()=='I'){     Generador.escribir(Generador.ASIG,y,'F',x);
			/*Cuando es son numeros*/		}else if(Variables.TipoVariable(a)==x.tipoVar()){  Generador.escribir(Generador.ASIG,a,'N',x);
		/*Cuando es de int-> float*/			}else if(Variables.TipoVariable(a)=='I'){     Generador.escribir(Generador.ASIG,a,'F',x);
		/*Cuando es de float -> int*/			}else{ Generador.escribir(40, null, null,null);}
							   }							
							RESULT = x; 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declara ::= declara COMA parteDeca 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable v=(Variable) d1;
							   Variables.GuardarVariable(d,v.tipoVar()); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= REAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= IDENT exp CC 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	
						   Variable x=Variables.ComprobarExiste(i1);
						   Variable y=null;
						   String n=a+"";
						   if(Variables.TipoVariable(a)=='V'){y=(Variable) a;}
						   if(y!=null){n=y.nombreCompleto();}				
						   if(x!=null){
							y=Variables.ComprobarExiste(x.nombre()+n+"]");
							if(y==null){ y=Variables.GuardarVariable(x.nombre()+n+"]",x.tipoVar());
								y.topeArray(x.topeArray());  y.llave(x.llave());}
							x=Generador.nuevaTemp(y.tipoVar());
							Generador.escribir(Generador.ASIG,y,'N',x);
/*Devuelve la clase Variable suya*/			RESULT = x;
						   }else{
							Generador.escribir(40,null,null,null);
						   }
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= IDENT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
						   Variable x=Variables.ComprobarExiste(i1);
						   if(x!=null){
/*Devuelve la clase Variable suya*/			RESULT = x;
						   }else{
							Generador.escribir(40,null,null,null);
						   }
					 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Variable x=Variables.ComprobarExiste(i);
							Variable y=null;	
						        if(x!=null){
								if(Variables.TipoVariable(a)=='V'){ y=(Variable) a;}						
		/*si I y A son variables mismo tipo*/		if(y!=null && y.tipoVar()==x.tipoVar()){   Generador.escribir(Generador.ASIG,y,'N',x);
/*si es una ARRAY*/						}else if(x.topeArray()!=0){
									y=Generador.nuevaTemp(x.tipoVar());
									Generador.escribir(Generador.ASIG,a,'A',x);
									Generador.escribir(Generador.ASIG,x,'A',y);
									x=y;
		/*cuando es de int -> float*/			}else if(y!=null && y.tipoVar()=='I'){     Generador.escribir(Generador.ASIG,y,'F',x);
			/*Cuando es son numeros*/		}else if(Variables.TipoVariable(a)==x.tipoVar()){  Generador.escribir(Generador.ASIG,a,'N',x);
		/*Cuando es de int-> float*/			}else if(Variables.TipoVariable(a)=='I'){     Generador.escribir(Generador.ASIG,a,'F',x);
		/*Cuando es de float -> int*/			}else{ Generador.escribir(40, null, null,null);}
							}else{ 
								Generador.escribir(40, null, null,null);		
							}							
							RESULT = x; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= IDENT exp CC ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Variable x=Variables.ComprobarExiste(i);
						   Variable y=null;
						   String n=b+"";
						   if(Variables.TipoVariable(b)=='V'){y=(Variable) b;}
						   String l1=Generador.nuevaEtiq();
						   String l2=Generador.nuevaEtiq();
						   if(y!=null){ n=y.nombreCompleto();}
						   y=Variables.GuardarVariable(n,x.tipoVar());
						   y.topeArray(x.topeArray());
					           Generador.escribir(Generador.RANGO,l1,l2,y);
						   y=null;
						   Variable z=Variables.ComprobarExiste(x.nombre()+n+"]");
						   if(x!=null){
							if(z==null){ z=Variables.GuardarVariable(x.nombre()+n+"]",x.tipoVar());
							   z.topeArray(x.topeArray()); z.llave(x.llave());}
							if(Variables.TipoVariable(a)=='V'){ y=(Variable) a;}
							if(y!=null){ Generador.escribir(Generador.ASIG,y,'N',z);
							}else{ Generador.escribir(Generador.ASIG,a,'N',z);}
						   }else{ Generador.escribir(40,null,null,null);}
						   RESULT=z;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= IDENT mmnn 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character m = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						   Variable v=Variables.ComprobarExiste(i1);
						   if(v!=null){
							Variable t=Generador.nuevaTemp(v.tipoVar());
							Generador.escribir(Generador.ASIG,v.nombreCompleto(),null,t);
								if(m=='1'){ Generador.escribir(Generador.MAS, v.nombreCompleto(), "1", v.nombreCompleto());
								}else{	Generador.escribir(Generador.MENOS, v.nombreCompleto(),"1",v.nombreCompleto());}
							RESULT = v;
						   }else{ 
							Generador.escribir(40, null, null,null);		
						   }
 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= mmnn IDENT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Character m = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						   Variable v=Variables.ComprobarExiste(i);
						   if(v!=null){
							if(m=='1'){ Generador.escribir(Generador.MAS, v.nombreCompleto(), "1", v.nombreCompleto());
							}else{ Generador.escribir(Generador.MENOS,v.nombreCompleto(),"1",v.nombreCompleto());}

		 					RESULT = v; 
						   }else{ 
							Generador.escribir(40, null, null,null);		
						   }							

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= AP exp CP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= CASFLOAT exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   Variable x=Generador.nuevaTemp('F');
						     Variable y=null;
						     if(Variables.TipoVariable(a)=='V'){ y=(Variable) a;}
 /*si I y A son variables mismo tipo*/		     if(y!=null && y.tipoVar()=='F'){   Generador.escribir(Generador.ASIG,y,'N',x);
		/*cuando es de int -> float*/	     }else if(y!=null){  Generador.escribir(Generador.ASIG,y,'F',x);
			/*Cuando es son numeros*/    }else if(Variables.TipoVariable(a)=='F'){  Generador.escribir(Generador.ASIG,a,'N',x);
		/*Cuando es de int-> float*/	     }else{     Generador.escribir(Generador.ASIG,a,'F',x);}							
						     RESULT=x; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= CASINT exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   Variable x=Generador.nuevaTemp('I');
						     Variable y=null;
						     if(Variables.TipoVariable(a)=='V'){ y=(Variable) a;}
 /*si I y A son variables mismo tipo*/		     if(y!=null && y.tipoVar()=='I'){   Generador.escribir(Generador.ASIG,y,'N',x);
		/*cuando es de int -> float*/	     }else if(y!=null){  Generador.escribir(Generador.ASIG,y,'I',x);
			/*Cuando es son numeros*/    }else if(Variables.TipoVariable(a)=='I'){  Generador.escribir(Generador.ASIG,a,'N',x);
		/*Cuando es de int-> float*/	     }else{     Generador.escribir(Generador.ASIG,a,'I',x);}							
						     RESULT=x; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= MENOS exp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable t = Generador.nuevaTemp('I');
				        		Generador.escribir(Generador.MENOS, "0", n, t);
							RESULT = t;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable t0,t1,t2;
							t0 = Generador.nuevaTemp('I');
							t1 = Generador.nuevaTemp('I');
							t2 = Generador.nuevaTemp('I');
				        		Generador.escribir(Generador.DIV, a, b, t0);
				        		Generador.escribir(Generador.POR, t0, b, t1);
				        		Generador.escribir(Generador.MENOS, a, t1, t2);
							RESULT = t2;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp DIV exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable x=null;
							Variable y=null;
							Variable t=null;
							if(Variables.TipoVariable(a)=='V'){ x=(Variable) a;}
							if(Variables.TipoVariable(b)=='V'){ y=(Variable) b;}
/*Cuando a y b son del mismo tipo*********/		if(Variables.TipoVariable(a)==Variables.TipoVariable(b)){
	/*Si las dos variables son iguales*/		    if(x!=null && y!=null && x.tipoVar()==y.tipoVar()){ 			
							    	t = Generador.nuevaTemp(x.tipoVar());
				        		        Generador.escribir(Generador.DIV, x,y,t);	
	/*Si la variable B es FLOAT*/		 	    }else if(x!=null && y!=null){ 
								if(y.tipoVar()=='I'){  t=y;  y=x;  x=t;}
								Variable t0 = Generador.nuevaTemp(y.tipoVar());
								Generador.escribir(Generador.ASIG,x,'F', t0);
								t = Generador.nuevaTemp(y.tipoVar());
				        		        Generador.escribir(Generador.DIV, y,t0,t);
	/*Cuando son dos numeros del mismo tipo*/ 	    }else{
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.DIV, a,b,t);
							    }
/*Si son de diferente tipo de variable *****/		}else{
							    if(y!=null || x!=null){ 	
								if(y!=null){ x=y; b=a;}
								if(x.tipoVar()==Variables.TipoVariable(b)){
 								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.DIV,b,x,t);					
							    	}else if(x.tipoVar()=='F'){
								   Variable t0 = Generador.nuevaTemp(x.tipoVar());
								   Generador.escribir(Generador.ASIG,b,'F', t0);
								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.DIV, x,t0,t);
							        }else{
								   Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(b));
								   Generador.escribir(Generador.ASIG,x,'F', t0);
								   t = Generador.nuevaTemp(Variables.TipoVariable(b));
				        		           Generador.escribir(Generador.DIV, b,t0,t);
								}															  
	/*Si el numero A es FLOAT*/			    }else{
								if(Variables.TipoVariable(b)=='F'){ Object c=a; a=b; b=c;}	
								Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(a));
								Generador.escribir(Generador.ASIG,b,'F', t0);
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.DIV, a,t0,t);
							    }
							}							RESULT=t;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable x=null;
							Variable y=null;
							Variable t=null;
							if(Variables.TipoVariable(a)=='V'){ x=(Variable) a;}
							if(Variables.TipoVariable(b)=='V'){ y=(Variable) b;}
/*Cuando a y b son del mismo tipo*********/		if(Variables.TipoVariable(a)==Variables.TipoVariable(b)){
	/*Si las dos variables son iguales*/		    if(x!=null && y!=null && x.tipoVar()==y.tipoVar()){ 			
							    	t = Generador.nuevaTemp(x.tipoVar());
				        		        Generador.escribir(Generador.POR, x,y,t);	
	/*Si la variable B es FLOAT*/		 	    }else if(x!=null && y!=null){ 
								if(y.tipoVar()=='I'){  t=y;  y=x;  x=t;}
								Variable t0 = Generador.nuevaTemp(y.tipoVar());
								Generador.escribir(Generador.ASIG,x,'F', t0);
								t = Generador.nuevaTemp(y.tipoVar());
				        		        Generador.escribir(Generador.POR, y,t0,t);
	/*Cuando son dos numeros del mismo tipo*/ 	    }else{
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.POR, a,b,t);
							    }
/*Si son de diferente tipo de variable *****/		}else{
							    if(y!=null || x!=null){ 	
								if(y!=null){ x=y; b=a;}
								if(x.tipoVar()==Variables.TipoVariable(b)){
 								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.POR,b,x,t);					
							    	}else if(x.tipoVar()=='F'){
								   Variable t0 = Generador.nuevaTemp(x.tipoVar());
								   Generador.escribir(Generador.ASIG,b,'F', t0);
								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.POR, x,t0,t);
							        }else{
							   Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(b));
								   Generador.escribir(Generador.ASIG,x,'F', t0);
								   t = Generador.nuevaTemp(Variables.TipoVariable(b));
				        		           Generador.escribir(Generador.POR, b,t0,t);
								}															  
	/*Si el numero A es FLOAT*/			    }else{
								if(Variables.TipoVariable(b)=='F'){ Object c=a; a=b; b=c;}	
								Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(a));
								Generador.escribir(Generador.ASIG,b,'F', t0);
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.POR, a,t0,t);
							    }
							}							RESULT=t;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable x=null;
							Variable y=null;
							Variable t=null;
							if(Variables.TipoVariable(a)=='V'){ x=(Variable) a;}
							if(Variables.TipoVariable(b)=='V'){ y=(Variable) b;}
/*Cuando a y b son del mismo tipo*********/		if(Variables.TipoVariable(a)==Variables.TipoVariable(b)){
	/*Si las dos variables son iguales*/		    if(x!=null && y!=null && x.tipoVar()==y.tipoVar()){ 			
							    	t = Generador.nuevaTemp(x.tipoVar());								
				        		        Generador.escribir(Generador.MENOS, x,y,t);	
	/*Si la variable B es FLOAT*/		 	    }else if(x!=null && y!=null){ 
								if(y.tipoVar()=='I'){  t=y;  y=x;  x=t;}
								Variable t0 = Generador.nuevaTemp(y.tipoVar());
								Generador.escribir(Generador.ASIG,x,'F', t0);
								t = Generador.nuevaTemp(y.tipoVar());
				        		        Generador.escribir(Generador.MENOS, y,t0,t);
	/*Cuando son dos numeros del mismo tipo*/ 	    }else{
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.MENOS, a,b,t);
							    }
/*Si son de diferente tipo de variable *****/		}else{
							    if(y!=null || x!=null){ 	
								if(y!=null){ x=y; b=a;}
								if(x.tipoVar()==Variables.TipoVariable(b)){
 								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.MENOS,b,x,t);					
							    	}else if(x.tipoVar()=='F'){
								   Variable t0 = Generador.nuevaTemp(x.tipoVar());
								   Generador.escribir(Generador.ASIG,b,'F', t0);
								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.MENOS, x,t0,t);
							        }else{
								   Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(b));
								   Generador.escribir(Generador.ASIG,x,'F', t0);
								   t = Generador.nuevaTemp(Variables.TipoVariable(b));
				        		           Generador.escribir(Generador.MENOS, b,t0,t);
								}															  
	/*Si el numero A es FLOAT*/			    }else{
								if(Variables.TipoVariable(b)=='F'){ Object c=a; a=b; b=c;}	
								Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(a));
								Generador.escribir(Generador.ASIG,b,'F', t0);
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.MENOS, a,t0,t);
							    }
							}							RESULT=t;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  	Variable x=null;
							Variable y=null;
							Variable t=null;
							if(Variables.TipoVariable(a)=='V'){ x=(Variable) a;}
							if(Variables.TipoVariable(b)=='V'){ y=(Variable) b;}
/*Cuando a y b son del mismo tipo*********/		if(Variables.TipoVariable(a)==Variables.TipoVariable(b)){
	/*Si las dos variables son iguales*/		    if(x!=null && y!=null && x.tipoVar()==y.tipoVar()){ 			
							    	t = Generador.nuevaTemp(x.tipoVar());
				        		        Generador.escribir(Generador.MAS, x,y,t);	
	/*Si la variable B es FLOAT*/		 	    }else if(x!=null && y!=null){ 
								if(y.tipoVar()=='I'){  t=y;  y=x;  x=t;}
								Variable t0 = Generador.nuevaTemp(y.tipoVar());
								Generador.escribir(Generador.ASIG,x,'F', t0);
								t = Generador.nuevaTemp(y.tipoVar());
				        		        Generador.escribir(Generador.MAS, y,t0,t);
	/*Cuando son dos numeros del mismo tipo*/ 	    }else{
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.MAS, a,b,t);
							    }
/*Si son de diferente tipo de variable *****/		}else{
							    if(y!=null || x!=null){ 	
								if(y!=null){ x=y; b=a;}
								if(x.tipoVar()==Variables.TipoVariable(b)){
 								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.MAS,b,x,t);					
							    	}else if(x.tipoVar()=='F'){
								   Variable t0 = Generador.nuevaTemp(x.tipoVar());
								   Generador.escribir(Generador.ASIG,b,'F', t0);
								   t = Generador.nuevaTemp(x.tipoVar());
				        		           Generador.escribir(Generador.MAS, x,t0,t);
							        }else{
								   Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(b));
								   Generador.escribir(Generador.ASIG,x,'F', t0);
								   t = Generador.nuevaTemp(Variables.TipoVariable(b));
				        		           Generador.escribir(Generador.MAS, b,t0,t);
								}															  
	/*Si el numero A es FLOAT*/			    }else{
								if(Variables.TipoVariable(b)=='F'){ Object c=a; a=b; b=c;}	
								Variable t0 = Generador.nuevaTemp(Variables.TipoVariable(a));
								Generador.escribir(Generador.ASIG,b,'F', t0);
								t = Generador.nuevaTemp(Variables.TipoVariable(a));
				        		        Generador.escribir(Generador.MAS, a,t0,t);
							    }
							}
							RESULT=t;
			 	    		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mmnn ::= MENOSMENOS 
            {
              Character RESULT =null;
		 RESULT='0'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mmnn",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mmnn ::= MASMAS 
            {
              Character RESULT =null;
		 RESULT='1'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mmnn",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaExp ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaExp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaExp ::= listaExp sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

